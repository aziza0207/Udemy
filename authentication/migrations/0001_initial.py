# Generated by Django 4.1.2 on 2022-10-13 14:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Эл.почта')),
                ('full_name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('is_mentor', models.BooleanField(default=False, verbose_name='Вы преподователь?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Вы администратор?')),
                ('type_of_teaching', models.CharField(choices=[('private', 'лично, частным образом'), ('professional', 'лично, профессионально'), ('онлайн', 'online'), ('other', 'другое')], default='other', help_text='Каким видом преподавания вы занимались раньше?', max_length=25)),
                ('audition', models.CharField(choices=[('no', 'в настоящий момент нет'), ('small', 'у меня маленькая аудитория'), ('sufficient', 'у меня достаточная аудитория')], default='no', help_text='Есть ли у вас аудитория, с которой вы хотите поделиться своим курсом?', max_length=25)),
                ('finished_registration', models.BooleanField(default=False)),
                ('reset_uuid', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('reset_datetime', models.DateTimeField(blank=True, default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
